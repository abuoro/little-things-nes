; tested: upd_pokeColName
; During vblank, copies from pokeColNameBuf to
; screen column pokeColX of VRAM.

; tested: upd_pokeColAttr
; Copies from pokeColNameBuf to the attribute column
; corresponding to screen column pokeColX of VRAM.

; tested: pokeColName
; Generates nametable data for screen column x into
; transfer buffer pokeColNameBuf.

; tested: pokeColAttr
; Generates attribute data for screen column x into
; transfer buffer pokeColAttrBuf.

; -----------------------------------------------------------

; need: pokeTile
; Generates nametable data and attributes for the tile at
; mapcache position x into a transfer buffer.

; need: upd_pokeTile
; During vblank, copies data generated by poke_tile to VRAM.

; need: upd_bg
; calls upd_poke* as necessary.

; need: queuePokeTile
; Queues a poke_tile to happen in a future frame.
; Useful because only one poke_tile per frame is allowed.

; need: queuePokeCol
; Queues a poke_*_col to happen in a future frame.
; Useful because only one poke_*_col per 4 frames is allowed.

; need: decodeSimpleMapCol
; Decodes one simplemap column to the right to the
; mapCache column corresponding to screen column x.

; need: decodeMapCol
; Decodes one compressed map column to the right to the
; mapCache column corresponding to screen column x.




map format:

Each metatile has a most common next metatile.  A two-byte
header before each row tells whether the tile uses this
most common tile or a specified tile.

decodeMapCol pseudo:
  last = 0
  top = getByte()
  bottom = getByte()
  mapCacheCol = mapCache + (pokeColX & 0x3c) >> 2
  for y in (0..13):
    shift (bottom, top) right into carry
    if carry is set:
      last = getByte()
    else:
      last = mostCommonBelow[last]
    mapCacheCol[y] = last


getByte:
  ldy #0
  lda (levelData),y
  inc levelData
  bne @noNewPage
  inc levelData+1
@noNewPage:
  rts

decodeMapCol:
  lda #0
  sta @last
  jsr getByte
  sta @top
  jsr getByte
  sta @bottom
  lda #14
  sta @heightLeft
  lda pokeColX
  and #$3c
  lsr a
  lsr a
  tax

@loop:
  lsr bottom
  ror top
  bcs @tileWasSpecified
  ldy last
  lda mostCommonTile,y
  jmp @writeTile
@tileWasSpecified
  jsr getByte
@writeTile:
  sta last
  sta mapCache,x
  inx
  dec noNewByte
  bne @loop
  rts
